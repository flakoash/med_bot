"""
Disclosure most of this script is generated by copying code from the unsloth documentation
"""
import os

from unsloth import FastLanguageModel
import torch
from datasets import load_dataset
from peft import LoraConfig, prepare_model_for_kbit_training
from transformers import BitsAndBytesConfig, TrainingArguments
from trl import SFTConfig, SFTTrainer

def main():
    # MODEL_ID   = "unsloth/Meta-Llama-3.1-8B-Instruct-bnb-4bit"
    MODEL_ID   = "unsloth/Phi-3.5-mini-instruct"
    DATA_PATH  = "data/cleaned"
    OUTPUT_DIR = "runs/medqa_lora_phi"

    max_seq_length = 2048 # Choose any! We auto support RoPE Scaling internally!
    dtype = None # None for auto detection. Float16 for Tesla T4, V100, Bfloat16 for Ampere+
    load_in_4bit = True # Use 4bit quantization to reduce memory usage. Can be False.

    model, tokenizer = FastLanguageModel.from_pretrained(
        device_map="cuda:0",
        model_name = MODEL_ID,
        max_seq_length = max_seq_length,
        dtype = dtype,
        load_in_4bit = load_in_4bit,
        # token = "hf_...", # use one if using gated models like meta-llama/Llama-2-7b-hf
    )

    model = FastLanguageModel.get_peft_model(
        model,
        r = 16, # Choose any number > 0 ! Suggested 8, 16, 32, 64, 128
        target_modules = ["q_proj", "k_proj", "v_proj", "o_proj",
                        "gate_proj", "up_proj", "down_proj",],
        lora_alpha = 16,
        lora_dropout = 0, # Supports any, but = 0 is optimized
        bias = "none",    # Supports any, but = "none" is optimized
        # [NEW] "unsloth" uses 30% less VRAM, fits 2x larger batch sizes!
        use_gradient_checkpointing = "unsloth", # True or "unsloth" for very long context
        random_state = 3407,
        use_rslora = False,  # We support rank stabilized LoRA
        loftq_config = None, # And LoftQ
    )

    dataset = load_dataset("json", data_files={
            "train": os.path.join(DATA_PATH,"train.jsonl"),
            "validation": os.path.join(DATA_PATH,"val.jsonl"),
        })

    def format_prompts(example):
        msgs = [
            {"role": "system",    "content": "You are a helpful medical assistant."},
            {"role": "user",      "content": example["instruction"]},
            {"role": "assistant", "content": example["output"]},
        ]
        return tokenizer.apply_chat_template(
            msgs,
            tokenize=False,
            add_generation_prompt=False
        )

    dataset_train = dataset.map(lambda x: {"text": format_prompts(x)}, remove_columns=dataset["train"].column_names)
    dataset_train = dataset_train.map(
        lambda x: tokenizer(x["text"]), num_proc=4,
        remove_columns=["text"],
    )

    trainer = SFTTrainer(
        model = model,
        tokenizer = tokenizer,
        train_dataset = dataset_train["train"],
        # eval_dataset = dataset["validation"],
        dataset_text_field = "text",
        max_seq_length = max_seq_length,
        packing = False, # Can make training 5x faster for short sequences.
        args = SFTConfig(
            per_device_train_batch_size = 2,
            gradient_accumulation_steps = 4,
            warmup_steps = 5,
            max_steps = 60,
            learning_rate = 2e-4,
            logging_steps = 1,
            optim = "adamw_8bit",
            weight_decay = 0.01,
            lr_scheduler_type = "linear",
            seed = 3407,
            output_dir = "outputs",
        ),
    )

    trainer_stats = trainer.train()

    model.merge_adapter()
    model.save_pretrained(OUTPUT_DIR)
    tokenizer.save_pretrained(OUTPUT_DIR)

if __name__ == "__main__":
    main()